#  version 0.144:
See notes for 0.143; this just corrects the schema version number allowing
vrpipe-db_upgrade to work.

# version 0.143:
This is a substantial overhaul of how things work under-the-hood, and also
features an experimental fix for database inconsistencies that has not been
tested in a production environment. You may wish to hold off upgrading until the
next version.
This version features a database schema change: run vrpipe-db_upgrade after
installation.
Note that if you use a pipeline that uses the bam_to_fastq step, you must make
sure you have the bam2fastq exe now, and possibly reconfigure your setups.

# version 0.140:
A number of steps that previously assumed their bam input files were indexed now
explicitly require a 'bai_inputs' input. If you have written your own pipelines
that use these steps, you may have to add a bam_index step, or an adaptor if you
already had a bam_index step.
The archive_files step no longer advertises an output file, so you can no longer
use the output of an archive_files pipeline as the source of a vrpipe
datasource.

# version 0.130:
Alterations to the API of datasources were made in this version. If you have
created your own datasource module, note that now _update_changed_marker()
method is no longer used, and the existing _has_changed() method must now
always set the _changed_marker in addition to returning boolean.

# version 0.124:
This version features a database schema change: run vrpipe-db_upgrade after
installation.

# version 0.121:
This re-enables the feature discussed in the previous note: this version is safe
to upgrade to.

# version 0.120:
Normally when VRPipe detects missing input or output files it will automatically
restart the relevant step. This feature has been disabled in this version. You
may wish to skip this version as a result; the feature will likely return in a
future version.

# version 0.112:
This is a bug-fixed version of 0.111. It should be safe to upgrade to if you use
LSF. The local scheduler does function and should be fine on multi-processor
systems, but on some systems may be excruciatingly slow. See the notes below for
0.111 if upgrading from a version earlier than that..

# version 0.111:
If you are using a version earlier than 0.106, upgrade to that first,
following the guidance below. * the sensibly cautious may wish to avoid
upgrading to this version and wait for the next version instead *

This version features substantial changes to core class APIs and the database.
Run vrpipe-db_upgrade to upgrade your database. SiteConfig options have changed,
so also be sure to rerun Build.PL and answer the new questions. vrpipe-server
now takes over the role of vrpipe-trigger_pipelines and
vrpipe-dispatch_pipelines so be sure to keep it running in the new --farm mode.

If you have developed your own pipeline modules, these will need to be altered
to match the new API:
VRPipe::Pipeline no longer has _num_steps column, and PipelineRole gains a new
construction implementation involving new methods that can be implemented in
VRPipe::Pipelines::* modules: step_names(), adaptor_definitions() and
behaviour_definitions(). See some supplied Pipeline modules for how to define
these; you are defining the exact same things as before in pretty much the same
way, but now it just looks nicer and takes fewer characters.
VRPipe::Steps::* haven't changed in this version, but you should ensure that
you supply {output_files => [$ofile]} to dispatch calls, if more than 1 dispatch
occurs in the body_sub (and an output file is actually made). Also,
VRPipe::Requirements->time is now in seconds instead of hours, with backwards
compatibility for values under 60.

Other changes you might need to be aware of:
VRPipe::Pipeline no longer has a steps() method; use step_members() instead.
Pipelines are now constructed by calling create() (instead of steps()), and all
pipelines and steps can be created with
VRPipe::Interface::BackEnd->install_pipelines_and_steps().
Manager no longer handles triggering or dispatch of setups. PipelineSetup itself
gains a trigger() method instead.
New VRPipe::FarmServer class to track running servers. Manager lets
vrpipe-server register_farm_server(). PipelineSetup gains a desired_farm and
controlling_farm.
PipelineSetup gains currently_complete() method.
VRPipe::Scheduler: removed submit(), build_command_line(), run_on_node(),
wait_for_sid() and the scheduler_*_file() methods. It now has an
ensure_running() method instead of submit(). We no longer store or even look at
scheduler output. A VRPipe::Submission is no longer something you submit to the
farm, but something that vrpipe-handler (running on a farm node) will pick up to
run.

# version 0.106:
Further subtle issues have been discovered that may affect your VRPipe database
following the upgrade to 0.103 and/or 0.104. If you have ever used version
0.102 or earlier, it is STRONGLY recommended you do the following:
    1) Install 0.106 as normal.
    2) Make sure you have no VRPipe code running.
    3) Log into your production database and execute the following command:
    mysql> update datasource set _changed_marker = 'foo';
    4) Run this Perl multi-liner (copy and paste it all in one go to your
       terminal):
perl -MVRPipe::Persistent::Schema -Mstrict -we 'foreach my $setup (VRPipe::PipelineSetup->search({})) { \
    print STDERR ". "; \
    eval { $setup->datasource->incomplete_element_states($setup); }; \
} warn "\nAll done!\n";'
    5) Run this Perl multi-liner (copy and paste it all in one go to your
       terminal):
perl -MVRPipe::Persistent::Schema -Mstrict -we 'my $pager = VRPipe::DataElement->search_paged({withdrawn => 0}); \
while (my $des = $pager->next) { \
  foreach my $de (@$des) { \
    print STDERR ". "; \
    my $r = $de->result; \
    my $ps = $r->{paths} || next; \
    next if ref($ps); \
    my %correct_result; \
    while (my ($key, $val) = each %$r) { \
        $correct_result{$key} = $val; \
    } \
    $r->{paths} = 0; \
    $r->{paths} = $ps; \
    my ($orig) = VRPipe::DataElement->search({withdrawn => 1, datasource => $de->datasource->id, result => $r}); \
    if ($orig && $orig->id < $de->id) { \
        eval { VRPipe::StepState->search_rs({dataelement => $de->id})->delete; \
               VRPipe::DataElementState->search_rs({dataelement => $de->id})->delete; \
               $de->delete; }; \
        if ($@) { \
            $de->result($r); \
            $de->withdrawn(1); \
            $de->update; \
        } \
        $de = $orig; \
        $de->withdrawn(0); \
        $de->result(\%correct_result); \
    } \
    else { \
        my ($result_str) = VRPipe::DataElement->get_column_values("result", { id => $de->id }, {disable_inflation => 1}); \
        if ($result_str =~ /lane/) { \
            if ($result_str =~ /paths.+lane/s) { \
                $de->result($r); \
            } \
        } \
        else { \
            $de->result(\%correct_result); \
        } \
    } \
    $de->update; \
  } \
  print STDERR "\n"; \
}'
    6) Start running VRPipe again normally

# version 0.104:
This is identical to 0.103, released only to correct the upgrade instructions
below given for 0.103. Follow the advice given for 0.103, using this command
line when you get to step 3) (NB: it might take hours to run):
perl -Imodules -MVRPipe::Persistent::Schema -Mstrict -we 'my $pager = VRPipe::DataElement->search_paged({}); \
while (my $des = $pager->next) { \
  foreach my $de (@$des) { \
    my $r = $de->result; \
    my $ps = $r->{paths} || next; \
    next unless ref($ps); \
    next unless @$ps > 0; \
    eval { $de->_deflate_paths($r); }; next if $@; \
    my %new_result; \
    while (my ($key, $val) = each %$r) { \
        $new_result{$key} = $val; \
    } \
    $de->result(\%new_result); \
    $de->update; \
  } \
}'

If you had already completed your install of 0.103 and started running VRPipe
already, you can correct errors that may be in your database by again following
steps 1-5, but this time using the following 2 commands during step 3):
perl -Imodules -MVRPipe::Persistent::Schema -Mstrict -we 'my $pager = VRPipe::DataElement->search_paged({withdrawn => 0}); \
while (my $des = $pager->next) { \
  foreach my $de (@$des) { \
    print STDERR ". "; \
    my $r = $de->result; \
    my $ps = $r->{paths} || next; \
    next if ref($ps); \
    my %correct_result; \
    while (my ($key, $val) = each %$r) { \
        $correct_result{$key} = $val; \
    } \
    $r->{paths} = 0; \
    $r->{paths} = $ps; \
    my ($orig) = VRPipe::DataElement->search({withdrawn => 1, datasource => $de->datasource->id, result => $r}); \
    if ($orig && $orig->id < $de->id) { \
        eval { VRPipe::StepState->search_rs({dataelement => $de->id})->delete; \
               VRPipe::DataElementState->search_rs({dataelement => $de->id})->delete; \
               $de->delete; }; \
        if ($@) { \
            $de->result($r); \
            $de->withdrawn(1); \
            $de->update; \
        } \
        $de = $orig; \
        $de->withdrawn(0); \
        $de->result(\%correct_result); \
    } \
    else { \
        my ($result_str) = VRPipe::DataElement->get_column_values("result", { id => $de->id }, {disable_inflation => 1}); \
        if ($result_str =~ /lane/) { \
            if ($result_str =~ /paths.+lane/s) { \
                $de->result($r); \
            } \
        } \
        else { \
            $de->result(\%correct_result); \
        } \
    } \
    $de->update; \
  } \
  print STDERR "\n"; \
}'
perl -Imodules -MVRPipe::Persistent::Schema -Mstrict -we 'my $pager = VRPipe::DataElement->search_paged({withdrawn => 1}); \
while (my $des = $pager->next) { \
  foreach my $de (@$des) { \
    my $r = $de->result; \
    my $ps = $r->{paths} || next; \
    next if ref($ps); \
    my ($corrected) = VRPipe::DataElement->search({withdrawn => 0, datasource => $de->datasource->id, result => $r}); \
    unless ($corrected) { \
        $de->result($r); \
        $de->update; \
    } \
  } \
}'

# version 0.103:
New CPAN module dependencies were added, and a new SiteConfig option should be
answered, so be sure to rerun 'perl Build.PL' and answer 'y' to the first
question, also running './Build installdeps' if indicated.
This version makes a change to how some data is stored in the database, so if
upgrading and you have a production database in use, it is VERY IMPORTANT that
you do the following PRIOR to installation of 0.103:
    1) make sure you have no VRPipe code running
    2) cd to the root of your vr-pipe git clone directory, updated to the latest
       code (ie. the directory containing this file)
    3) run the following (copy and paste all the lines in one go to your
       terminal):
[redacted - see notes for version 0.104]
    4) install this latest version of VRPipe in your normal way
    5) start running VRPipe again

# version 0.101:
Now that we have more than 100 versions, all previous tags in the git repository
have been renamed. If you have an existing clone, however, the old tags will
still be there. If it bothers you, you can delete them, eg:
perl -e 'for (1..99) { $old = "0.".sprintf("%02d", $_); system("git tag -d $old"); }'
If you have your own fork, also delete from your origin:
perl -e 'for (1..99) { $old = "0.".sprintf("%02d", $_); system("git push origin :refs/tags/$old"); }'

# version 0.100:
If you have used previous versions it is possible you have large Job stdout/err
files hanging around that are just wasting disc space. You can delete these by
doing something like:
perl -MVRPipe::Persistent::Schema -Mstrict -we 'foreach my $file (VRPipe::File->search({ s => { ">=" => 536870912 }, e => 1, path => { "LIKE" => q[%job_std%] } })) { $file->unlink }'
(which deletes all job_std* files over 512MB)

# version 0.99:
This version features a schema change, so be sure to run vrpipe-db_upgrade if
upgrading from an earlier version.
(MooseX::AbstractFactory is also no longer required)

# version 0.96:
This version features a schema change, so be sure to run vrpipe-db_upgrade if
upgrading from an earlier version.

# version 0.95:
This version removes, renames and alters a number of pipline and step modules.
Normally this is not something we will do, but we feel it is important in this
case. There are 2 consequences if you are upgrading:
    1) Your production database will still contain all the removed pipelines and
       steps, cluttering up the output of vrpipe-setup (when it lists available
       pipelines) and causing confusion (a user may pick one of the defunct
       pipelines).
    2) If you are partway through running one of the altered pipelines, or if
       you later need to rerun a setup that used an affected pipeline that
       previously completed, you will be left with a broken mess with undefined
       behaviour.

It is STRONGLY recommended that you resolve this by deleting affected pipelines
and steps from your production database:
    0) Complete installation of 0.95 in the usual way
    1) Log into your production database
    2) Run the following query to find affected PipelineSetups you've created in
       the past:
       mysql> select ps.id, ps.name, ps.user, p.name from pipelinesetup as ps left join pipeline as p on p.id = ps.pipeline where p.name in ('gatk_genotype', 'gatk_variant_calling_and_filter_vcf', 'mpileup_with_leftaln', 'snp_calling_chunked_mpileup_bcf', 'snp_calling_chunked_mpileup_vcf', 'snp_calling_gatk_vcf', 'snp_calling_mpileup_vcf', 'snp_calling_mpileup_bcf', 'vcf_chunked_vep_annotate', 'vcf_filter_merge_and_vep_annotate');
       You cannot delete affected pipelines or steps if there are any
       PipelineSetups that use them. The easiest thing to do for each one is:
    3) $ vrpipe-setup --setup [affected setup id] --delete
       Note that this will remove all trace that you ever created or ran that
       setup (including deletion of the output files), so do manual backups of
       anything you want to keep first.
    4) Run the following queries to delete the pipelines:
       mysql> delete sa.* from stepadaptor as sa left join pipeline as p on p.id = sa.pipeline where p.name in ('gatk_genotype', 'gatk_variant_calling_and_filter_vcf', 'mpileup_with_leftaln', 'snp_calling_chunked_mpileup_bcf', 'snp_calling_chunked_mpileup_vcf', 'snp_calling_gatk_vcf', 'snp_calling_mpileup_vcf', 'snp_calling_mpileup_bcf', 'vcf_chunked_vep_annotate', 'vcf_filter_merge_and_vep_annotate');
       mysql> delete sa.* from stepbehaviour as sa left join pipeline as p on p.id = sa.pipeline where p.name in ('gatk_genotype', 'gatk_variant_calling_and_filter_vcf', 'mpileup_with_leftaln', 'snp_calling_chunked_mpileup_bcf', 'snp_calling_chunked_mpileup_vcf', 'snp_calling_gatk_vcf', 'snp_calling_mpileup_vcf', 'snp_calling_mpileup_bcf', 'vcf_chunked_vep_annotate', 'vcf_filter_merge_and_vep_annotate');
       mysql> delete from pipeline where name in ('gatk_genotype', 'gatk_variant_calling_and_filter_vcf', 'mpileup_with_leftaln', 'snp_calling_chunked_mpileup_bcf', 'snp_calling_chunked_mpileup_vcf', 'snp_calling_gatk_vcf', 'snp_calling_mpileup_vcf', 'snp_calling_mpileup_bcf', 'vcf_chunked_vep_annotate', 'vcf_filter_merge_and_vep_annotate');
    5) Run the following query to delete steps no longer used by any pipeline:
       mysql> delete s.* from step as s left join stepmember as sm on sm.step = s.id where sm.step is NULL;
    6) Deactivate all PipelineSetups that used the vcf_vep_annotate pipeline,
       since this pipeline gained a step and you probably don't want those
       setups springing back to life and trying to run the new final step:
       myslq> update pipelinesetup as ps left join pipeline as p on p.id = ps.pipeline set active = 0 where p.name = 'vcf_vep_annotate';

# version 0.93:
This version features a schema change, so be sure to run vrpipe-db_upgrade.
There are also new SiteConfig options, so be sure to go through and answer all
the questions of 'perl Build.PL'.
This version introduces vrpipe-server, which needs a port to bind to. It is safe
for multiple different people with their own VRPipe installs and databases to
run the server on the same machine, but you will encounter errors if you attempt
to use a port that someone else is using: pick a port number (during
'perl Build.PL') unique to your own install.

# version 0.81:
This version increments the schema version, so be sure to run vrpipe-db_upgrade
if you used a previous version of VRPipe.
There is also improved handling of duplicate database rows. Older versions of
VRPipe may have left you with many duplicate rows, most likely in the
dataelementstate and stepstate tables. You may like to manually remove these:
mysql> delete des from dataelementstate as des inner join (select min(id) minid, pipelinesetup, dataelement from dataelementstate group by pipelinesetup, dataelement having count(*) > 1) as dups on (dups.pipelinesetup = des.pipelinesetup and dups.dataelement = des.dataelement and dups.minid <> des.id);
mysql> delete t from stepstate as t inner join (select min(id) minid, stepmember, dataelement, pipelinesetup from stepstate group by stepmember, dataelement, pipelinesetup having count(*) > 1) as dups on (dups.stepmember = t.stepmember and dups.dataelement = t.dataelement and dups.pipelinesetup = t.pipelinesetup and dups.minid <> t.id);
Note that this may have strange effects on what the system thinks has completed,
but shouldn't cause any harm and is recommended.

# version 0.76:
Like 0.75, this version improves indexes. See the notes for 0.75 if upgrading.

# version 0.75:
This version increments the schema version, so be sure to run vrpipe-db_upgrade
if you used a previous version of VRPipe.
No actual changes to the schema itself were made, however the indexing of
columns has improved and vrpipe-db_upgrade will add new additional indexes to
necessary columns. It does not, however, remove the old defunct indexes; you are
encouraged to remove these yourself. The new indexes which should be kept are
all named [table_name]_idx_[column_name]. The old indexes which should be
dropped are named psuedo_idx and txt_idx. If you have used VRPipe for a very
long time there may be other indexes which you should delete (except for
PRIMARY).

# version 0.74:
Minor changes to the schema (size of some int columns); be sure to run
vrpipe-db_upgrade if you have used a previous version of VRPipe.

# version 0.73:
This version adds support for sqlite, though it currently locks up the database
whilst running pipelines; it is only really suited for parsing use.

# version 0.31:
This version introduces proper database independence, and also automatic
indexing of appropriate columns. The only converter written so far, however,
is for MySQL.

# version 0.27:
The schema has changed in this version. Be sure to run vrpipe-db_upgrade if you
have used a previous version of VRPipe.

# versions 0.01-0.30:
a) Only MySQL is fully supported so far, though it may work with other dbs.
b) There is currently an issue with indexing certain columns that are too large
   to be specified as varchars. After running vrpipe-db_deploy you will have
   to manually connect to your production database and issue the following SQL:
   create index path_index on file path(255);
   create index output_root_index on scheduler (output_root(255));
   create index cmd_dir_index on job (cmd(255), dir(255));
   create index requirements_index on requirements (custom(255));
   create index result_index on dataelement (result(255));
   create index source_options_index on datasource (source(255), options(255));
   create index outputroot_options_index on pipelinesetup (output_root(255), options(255));
   create index allowed_values_index on stepoption (allowed_values(255));
   create index metadata_index on stepiodefinition (metadata(255));
   create index summary_index on stepcmdsummary (summary(255));
