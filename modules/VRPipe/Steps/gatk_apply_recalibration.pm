
=head1 NAME

VRPipe::Steps::gatk_apply_recalibration - a step

=head1 DESCRIPTION

Runs the GATK ApplyRecalibration walker to apply recalibrations to VCF files, using recalibration table files and tranchs files generated by the VariantRecalibrator walker

=head1 AUTHOR

Chris Joyce <cj5@sanger.ac.uk>.

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2011-2012 Genome Research Limited.

This file is part of VRPipe.

VRPipe is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=cut

use VRPipe::Base;

#Example ApplyRecalibration command - GATK v1.3
#java -Xmx3g -jar GenomeAnalysisTK.jar \
#   -T ApplyRecalibration \
#   -R reference/human_g1k_v37.fasta \
#   -input NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.b37.vcf \
#   --ts_filter_level 99.0 \
#   -tranchesFile path/to/output.tranches \
#   -recalFile path/to/output.recal \
#   -o path/to/output.recalibrated.filtered.vcf

class VRPipe::Steps::gatk_apply_recalibration extends VRPipe::Steps::gatk {
    around options_definition {
        return { %{ $self->$orig },
                 reference_fasta  => VRPipe::StepOption->create(description => 'absolute path to reference genome fasta'),
                 apply_recal_opts => VRPipe::StepOption->create(description => 'options for GATK ApplyRecalibration, excluding reference genome, input and output files'), };
    }
    
    method inputs_definition {
        return { vcf_files      => VRPipe::StepIODefinition->create(type => 'bin', max_files => -1, description => 'one or more tabixed vcf files processed by VariantRecalibrator'),
                 recal_files    => VRPipe::StepIODefinition->create(type => 'txt', max_files => -1, description => 'a recalibration table file in CSV format for each input vcf', metadata => { source_vcf => 'the vcf file from which calibrations were calculated' }),
                 tranches_files => VRPipe::StepIODefinition->create(type => 'txt', max_files => -1, description => 'a tranches file generated by VariantRecalibrator for each vcf', metadata => { source_vcf => 'the vcf file from which calibrations were calculated' }), };
    }
    
    method body_sub {
        return sub {
            my $self    = shift;
            my $options = $self->options;
            $self->handle_standard_options($options);
            
            my $apply_recal_opts = $options->{apply_recal_opts};
            my $reference_fasta  = $options->{reference_fasta};
            
            my $req = $self->new_requirements(memory => 1200, time => 1);
            my $jvm_args = $self->jvm_args($req->memory);
            
            # put recal and tranches file metadata into hashes for vcf name lookup
            my (%recal_files, %tranches_files);
            
            foreach my $recal (@{ $self->inputs->{recal_files} }) {
                my $path       = $recal->path->stringify;
                my $recal_meta = $recal->metadata;
                my $source_vcf = $recal_meta->{source_vcf};
                $recal_files{$source_vcf} = $path;
            }
            foreach my $tranches (@{ $self->inputs->{tranches_files} }) {
                my $path          = $tranches->path->stringify;
                my $tranches_meta = $tranches->metadata;
                my $source_vcf    = $tranches_meta->{source_vcf};
                $tranches_files{$source_vcf} = $path;
            }
            
            foreach my $vcf (@{ $self->inputs->{vcf_files} }) {
                my $vcf_path = $vcf->path;
                my $basename = $vcf->basename;
                if ($basename =~ /\.vcf.gz$/) {
                    $basename =~ s/\.vcf.gz$/.recal.vcf.gz/;
                }
                else {
                    $basename =~ s/\.vcf$/.recal.vcf/;
                }
                my $recal_file_path    = $recal_files{$vcf_path}    || $self->throw("got no recal file for $vcf_path");
                my $tranches_file_path = $tranches_files{$vcf_path} || $self->throw("got no tranches file for $vcf_path");
                
                my $vcf_recal_file = $self->output_file(output_key => 'recalibrated_vcfs', basename => $basename, type => 'vcf');
                my $vcf_recal_path = $vcf_recal_file->path;
                
                my $cmd = $self->java_exe . qq[ $jvm_args -jar ] . $self->jar . qq[ -T ApplyRecalibration -R $reference_fasta --input $vcf_path -tranchesFile $tranches_file_path -recalFile $recal_file_path -o $vcf_recal_path $apply_recal_opts ];
                $self->dispatch_wrapped_cmd('VRPipe::Steps::gatk_apply_recalibration', 'apply_recalibration', [$cmd, $req, { output_files => [$vcf_recal_file] }]);
            }
        };
    }
    
    method outputs_definition {
        return { recalibrated_vcfs => VRPipe::StepIODefinition->create(type => 'vcf', max_files => -1, description => 'a recalibrated vcf file for each input vcf') };
    }
    
    method post_process_sub {
        return sub { return 1; };
    }
    
    method description {
        return "Run gatk ApplyRecalibration to apply recalibrations to vcf files processed by VariantRecalibrator";
    }
    
    method max_simultaneous {
        return 0;            # meaning unlimited
    }
    
    method apply_recalibration (ClassName|Object $self: Str $cmd_line) {
        my ($input_path, $output_path) = $cmd_line =~ /-input (\S+) .* -o (\S+) /;
        my $input_file = VRPipe::File->get(path => $input_path);
        
        my $input_lines = $input_file->lines;
        
        $input_file->disconnect;
        system($cmd_line) && $self->throw("failed to run [$cmd_line]");
        
        my $output_file = VRPipe::File->get(path => $output_path);
        $output_file->update_stats_from_disc;
        my $output_lines = $output_file->lines;
        
        # Should have extra header lines
        unless ($output_lines >= $input_lines) {
            $output_file->unlink;
            $self->throw("Output VCF has $output_lines lines, less than input $input_lines");
        }
        else {
            return 1;
        }
    }
}

1;
