#!/usr/bin/env perl
use strict;
use warnings;

=head1 AUTHOR

Sendu Bala <sb10@sanger.ac.uk>.

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2012 Genome Research Limited.

This file is part of VRPipe.

VRPipe is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=cut

use VRPipe::FrontEnd;
use VRPipe::StepStatsUtil;

my $frontend = VRPipe::FrontEnd->new(description => "Get wall-time and memory usage stats for steps or whole pipelines.",
                                     opt_spec => [ [],
                                                   [ q[At least one of the following options is required:] ],
                                                   [ 'step=s@', 'Get stats for the given Step (by id or name); you can repeat this option', { persistent_object => 'Step' } ],
                                                   [ 'setup=s@', 'Get stats for the given PipelineSetup (by id or name); you can repeat this option', { persistent_object => 'PipelineSetup' } ],
                                                   [ 'pipeline=s@', 'Get stats for all the steps in the given Pipeline; you can repeat this option', { persistent_object => 'Pipeline' } ]
                                                 ],
                                     no_user_option => 1);

unless ($frontend->option_was_set('step') || $frontend->option_was_set('setup') || $frontend->option_was_set('pipeline')) {
    $frontend->die_with_error("At least one of --step, --setup or --pipeline must be supplied");
}


# resolve user options to steps
my %steps;
foreach my $step (@{$frontend->opts('step') || []}) {
    $steps{$step->id}->{all} = 1;
}

foreach my $pipeline (@{$frontend->opts('pipeline') || []}) {
    foreach my $stepmember ($pipeline->steps) {
        $steps{$stepmember->step->id}->{all} = 1;
    }
}

foreach my $setup (@{$frontend->opts('setup') || []}) {
    my $setup_id = $setup->id;
    foreach my $stepmember ($setup->pipeline->steps) {
        $steps{$stepmember->step->id}->{$setup_id} = 1;
    }
}

# get the stats per step, pipelinesetup and overall
my %stats;
my $schema = $frontend->schema;
while (my ($step_id, $setup_ids) = each %steps) {
    my $step = VRPipe::Step->get(id => $step_id);
    my $ssu = VRPipe::StepStatsUtil->new(step => $step);
    
    if (exists $setup_ids->{all}) {
        my $rs = $schema->resultset('StepStats')->search({ step => $step_id }, { distinct => 1 });
        my $rs_column = $rs->get_column('pipelinesetup');
        while (my $setup_id = $rs_column->next) {
            $setup_ids->{$setup_id} = 1;
        }
        delete $setup_ids->{all};
    }
    
    foreach my $setup_id (keys %$setup_ids) {
        add_stats($step_id, $setup_id);
    }
}

# print out findings
foreach my $by ('by_all', 'by_setup', 'by_step') {
    if ($by eq 'by_all') {
        print "\nOverall stats:\n";
    }
    elsif ($by eq 'by_setup') {
        print "\nStats by PipelineSetup:\n";
    }
    else {
        print "\nStats by Step:\n";
    }
    
    my @id_order = $by eq 'by_all' ? ('overall') : (sort { $stats{$by}->{time}->{$b}->[4] <=> $stats{$by}->{time}->{$a}->[4] } keys %{$stats{$by}->{time}});
    foreach my $id (@id_order) {
        my $time_string = get_stats($stats{$by}->{time}->{$id}, 'time');
        my $memory_string = get_stats($stats{$by}->{memory}->{$id}, 'memory');
        
        print "  $id:-\n    $time_string\n    $memory_string\n";
    }
}
print "\n";

exit;

sub add_stats {
    my ($step_id, $setup_id) = @_;
    my $rs = $schema->resultset('StepStats')->search({ step => $step_id, pipelinesetup => $setup_id });
    
    my $step = VRPipe::Step->get(id => $step_id);
    my $step_name = $step->name;
    my $setup = VRPipe::PipelineSetup->get(id => $setup_id);
    my $setup_name = $setup->name;
    
    foreach my $column ('memory', 'time') {
        my $rs_column = $rs->get_column($column);
        
        while (my $stat = $rs_column->next) {
            foreach my $grouping ('overall', 'step', 'setup') {
                my $array_ref;
                if ($grouping eq 'overall') {
                    $array_ref = $stats{by_all}->{$column}->{overall} || [];
                    $stats{by_all}->{$column}->{overall} = $array_ref;
                }
                elsif ($grouping eq 'step') {
                    $array_ref = $stats{by_step}->{$column}->{$step_name} || [];
                    $stats{by_step}->{$column}->{$step_name} = $array_ref;
                }
                elsif ($grouping eq 'setup') {
                    $array_ref = $stats{by_setup}->{$column}->{$setup_name} || [];
                    $stats{by_setup}->{$column}->{$setup_name} = $array_ref;
                }
                
                $array_ref->[0]++;
                if ($array_ref->[0] == 1) {
                    $array_ref->[1] = $stat;
                    $array_ref->[2] = 0;
                    $array_ref->[3] = $stat;
                    if ($column eq 'time') {
                        $array_ref->[4] = $stat;
                    }
                }
                else {
                    my $old_mean = $array_ref->[1];
                    $array_ref->[1] += ($stat - $old_mean) / $array_ref->[0];
                    $array_ref->[2] += ($stat - $old_mean) * ($stat - $array_ref->[1]);
                    if ($stat > $array_ref->[3]) {
                        $array_ref->[3] = $stat;
                    }
                    if ($column eq 'time') {
                        $array_ref->[4] += $stat;
                    }
                }
            }
        }
    }
}

sub get_stats {
    my ($array_ref, $type) = @_;
    my ($count, $mean, $sd, $max, $total) = @$array_ref;
    
    if ($count) {
        $mean = sprintf("%0.0f", $mean);
        $sd = sprintf("%0.0f", sqrt($sd / $count));
    }
    
    if ($type eq 'time') {
        my $days = int($total/(24*60*60));
        my $hrs = ($total/(60*60))%24;
        my $mins = ($total/60)%60;
        my $remaining_secs = $total%60;
        my $extra = $total > 60 ? " ($days days, $hrs hrs, $mins mins, $remaining_secs secs)" : '';
        return "Mean seconds per job: $mean (sd $sd, max $max, n=$count); Total serial wall time: $total secs$extra";
    }
    else {
        return "Mean MBs per job: $mean (sd $sd, max $max)";
    }
}
