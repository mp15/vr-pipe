#!/usr/bin/env perl
use strict;
use warnings;

=head1 AUTHOR

Sendu Bala <sb10@sanger.ac.uk>.

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2011-2012 Genome Research Limited.

This file is part of VRPipe.

VRPipe is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=cut

use Getopt::Long;
use aliased 'VRPipe::Persistent::Schema' => 'PS';
use aliased 'DBIx::Class::DeploymentHandler' => 'DH';
  
use VRPipe::Persistent::SchemaBase;
use VRPipe::Persistent::ConverterFactory;

my $to = PS->VERSION;
my $from = $to - 1;
my $help = 0;
GetOptions("from=i" => \$from,
           "to=i" => \$to,
           "help" => \$help);

if ($help) {
    print "Upgrade VRPipe schema for your production database:\nvrpipe-db_upgrade --from $from --to $to\n";
    exit;
}

my $s = PS->connect;

my $dbtype = lc(VRPipe::Persistent::SchemaBase->get_dbtype);
my $converter = VRPipe::Persistent::ConverterFactory->create($dbtype, {});
my $style = $converter->index_creation_style;

# check table index equivalence and come up with appropriate index commands
my (@drop_idx_cmds, @create_idx_cmds);
foreach my $class (keys %{$s->class_mappings}) {
    my $table_name = $class;
    $table_name =~ s/.*:://;
    $table_name = lc($table_name);
    my $meta = $class->meta;
    
    my $pre = $converter->get_index_cols($s, $table_name);
    my $post = $meta->get_attribute('idxd_cols')->get_value($meta);
    my $to_create = $meta->get_attribute('cols_to_idx')->get_value($meta);
    
    if ($style eq 'single') {
        # drop indexes we no longer want or where the column changed type, then
        # recreate the index in the latter case
        my %created;
        while (my ($col, $type) = each %$pre) {
            unless (defined $post->{$col} && $post->{$col} eq $type) {
                push(@drop_idx_cmds, @{$converter->get_index_statements($table_name, {$col => $type}, 'drop')});
                
                if (defined $post->{$col}) {
                    push(@create_idx_cmds, @{$converter->get_index_statements($table_name, {$col => $post->{$col}}, 'create')});
                    $created{$col} = 1;
                }
            }
        }
        
        # create indexes new to this version
        while (my ($col, $type) = each %$to_create) {
            next if $created{$col};
            unless (defined $pre->{$col} && $pre->{$col} eq $type) {
                push(@create_idx_cmds, @{$converter->get_index_statements($table_name, {$col => $type}, 'create')});
            }
        }
    }
    elsif ($style eq 'all') {
        # For columns with relationships (Persistent cols), DBIx::Class will
        # auto-create indexes for them. For tables with changes other than
        # brand new columns, it also drops the indexes we create manually here
        # (but maintains its own indexes). So we must detect changes and
        # recreate all our own indexes as necessary.
        
        my $pre = $converter->get_index_cols($s, $table_name);
        my $post = $meta->get_attribute('idxd_cols')->get_value($meta);
        my $to_create = $meta->get_attribute('cols_to_idx')->get_value($meta);
        while (my ($col, $type) = each %$pre) {
            if (! defined $post->{$col} || $post->{$col} ne $type) {
                @create_idx_cmds = @{$converter->get_index_statements($table_name, $to_create, 'create')};
                last;
            }
        }
        
        # create indexes new to this version
        unless (@create_idx_cmds) {
            while (my ($col, $type) = each %$to_create) {
                unless (defined $pre->{$col}) {
                    push(@create_idx_cmds, @{$converter->get_index_statements($table_name, {$col => $type}, 'create')});
                }
            }
        }
    }
    else {
        die "unknown index_creation_style '$style'\n";
    }
}

if (@drop_idx_cmds) {
    print "Dropping indexes...\n";
    run_index_cmds(\@drop_idx_cmds);
}

print "Altering columns...\n";
my $dh = DH->new({ schema => $s,
                   databases => PS->get_dbtype,
                   sql_translator_args => { add_drop_table => 0 },
                   force_overwrite => 0,
                   script_directory => PS->get_schema_dir });

$dh->prepare_deploy;
$dh->prepare_upgrade({ from_version => $from, to_version => $to});
$dh->upgrade;

if (@create_idx_cmds) {
    print "Creating indexes...\n";
    run_index_cmds(\@create_idx_cmds);
}

print "Upgrade complete!\n";

exit;

sub run_index_cmds {
    my $idx_cmds = shift;
    $s->storage->dbh_do(
	sub {
	    my ($storage, $dbh, $idx_cmds) = @_;
	    foreach my $cmd (@{$idx_cmds}) {
		print "   $cmd\n";
		$dbh->do($cmd);
	    }
	},
	$idx_cmds
    );
}