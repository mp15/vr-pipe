#!/usr/bin/env perl
use strict;
use warnings;

=head1 AUTHOR

Sendu Bala <sb10@sanger.ac.uk>.

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2011-2012 Genome Research Limited.

This file is part of VRPipe.

VRPipe is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=cut

use Getopt::Long;
use aliased 'VRPipe::Persistent::Schema' => 'PS';
use aliased 'DBIx::Class::DeploymentHandler' => 'DH';
  
use VRPipe::Persistent::SchemaBase;
use VRPipe::Persistent::ConverterFactory;
use Data::Compare;

my $to = PS->VERSION;
my $from = $to - 1;
my $help = 0;
GetOptions("from=i" => \$from,
           "to=i" => \$to,
           "help" => \$help);

if ($help) {
    print "Upgrade VRPipe schema for your production database:\nvrpipe-db_upgrade --from $from --to $to\n";
    exit;
}

my $s = PS->connect;

my $dbtype = lc(VRPipe::Persistent::SchemaBase->get_dbtype);
my $converter = VRPipe::Persistent::ConverterFactory->create($dbtype, {});

#Check table index equivalence
my @idx_cmds;
my (%for_indexing_pre_upgrade, %for_indexing_post_upgrade);

foreach my $class (keys %{$s->class_mappings}) {
	my $table_name = $class;
	$table_name =~ s/.*:://;
	$table_name = lc($table_name);
	my $meta = $class->meta;

    $for_indexing_pre_upgrade{$table_name} = $converter->get_index_cols($s, $table_name);
	$for_indexing_post_upgrade{$table_name} = $meta->get_attribute('idx_keys')->get_value($meta);
}
foreach my $tbl (keys %for_indexing_pre_upgrade) {
	unless ( Compare ($for_indexing_pre_upgrade{$tbl}, $for_indexing_post_upgrade{$tbl})) {
        push(@idx_cmds, @{$converter->get_index_statements($tbl, $for_indexing_pre_upgrade{$tbl}, 'drop')} );
        push(@idx_cmds, @{$converter->get_index_statements($tbl, $for_indexing_post_upgrade{$tbl}, 'create')} );
	}
}

my $dh = DH->new({ schema => $s,
                   databases => PS->get_dbtype,
                   sql_translator_args => { add_drop_table => 0 },
                   force_overwrite => 0,
                   script_directory => PS->get_schema_dir });

$dh->prepare_deploy;
$dh->prepare_upgrade({ from_version => $from, to_version => $to});
$dh->upgrade;

# Apply any table index increments
if (@idx_cmds) {
    print "Rebuilding indexes...\n";
	$s->storage->dbh_do(
		sub {
			my ($storage, $dbh, $idx_cmds) = @_;
			foreach my $cmd (@{$idx_cmds}) {
			   print "   $cmd\n";
			   $dbh->do($cmd);
			}
		},
		\@idx_cmds
	);
}

print "Upgrade complete!\n";

exit;
