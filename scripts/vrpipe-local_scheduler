#!/usr/bin/env perl
use strict;
use warnings;

=head1 AUTHOR

Sendu Bala <sb10@sanger.ac.uk>.

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2011 Genome Research Limited.

This file is part of VRPipe.

VRPipe is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=cut

use VRPipe::Interface::CmdLine;

my $cmdline = VRPipe::Interface::CmdLine->new(
    description => 'An implementation of a job scheduler that runs on the local CPU.',
    extra_args  => 'start|stop|submit <cmd line>|jobs [ids]|kill [ids]',
    opt_spec    => [
        ['out=s', 'When submitting, --out specifies the path to the file the local scheduler will redirect its STDOUT to (required for submit)'],
        ['err=s', 'When submitting, --err specifies the path to the file the local scheduler will redirect its STDERR to (required for submit)'],
        ['a=i',   'When submitting, -a specifies a job array of the given size (default 1)']
    ]
);

my ($command, @others) = @ARGV;
unless ($command) {
    $cmdline->error("a command is required");
    $cmdline->help;
}

my $params = { mode => $command };
if ($command eq 'submit') {
    my $cmd = $others[0] || $cmdline->die_with_error('submit must be supplied a command to run');
    $params->{cmd} = $cmd;
    $params->{env} = {%ENV};
}
elsif ($command eq 'jobs' || $command eq 'kill') {
    if ($command eq 'kill') {
        @others || $cmdline->die_with_error('kill must be supplied one or more ids');
    }
    $params->{id} = \@others if @others;
}
elsif ($command ne 'start' && $command ne 'stop') {
    $cmdline->error("command '$command' is not valid");
    $cmdline->help;
}

my $response = $cmdline->server_get('/local_scheduler', $params);
$cmdline->output($response);

exit;
